#ifndef PATHFINDERCONTROLLER_H
#define PATHFINDERCONTROLLER_H

#include <QObject>

class Game;
class PathSearchAction;

#include "pathfinder/pathfinder.h"

/**
 * @brief Result container generated by a tile drag test
 */
class TileDragTestResult : public QObject
{
    Q_OBJECT

public:
    TileDragTestResult() : QObject(0)
    {
    }

    std::set<ModelPoint> mPossibleApproaches;
};

/**
 * @brief An object providing controlled access to a path finder
 */
class PathFinderController : public QObject
{
    Q_OBJECT
public:
    explicit PathFinderController( QObject *parent = 0 );
    void init();

    /**
     * @brief Perform a search
     * @param action A search term container shared between the path finder and the ui
     * @param testOnly if true, the action is merely tested, otherwise the action is
     * performed and if successful, notifies the result via the pathFound signal.
     * @return true if the action is successfully started
     */
    bool doAction( PathSearchAction* action, bool testOnly = false );

    /**
     * @brief test multiple actions.
     * This method inividually enables/disables each action as per the result of its test.
     * @param actions An array of search term containers
     * @param count The dimension of the array
     */
    void testActions( PathSearchAction* actions[], unsigned count );

    /**
     * @brief Perform a non-action test
     * @param criteria The Test parameters
     * @return true if the test is successfully started
     */
    bool testCriteria( PathSearchCriteria* criteria );

signals:
    /**
     * @brief Notification of an action result
     * @param path
     * @param action The search action that started the search
     * If false, move animations are intended to resume on a subsequent trigger.
     */
    void pathFound( PieceListManager* path, PathSearchAction* action );

    /**
     * @brief Notification of a test result
     * @param reachable true if a path between the start and any target points are possible, otherwise false
     * @param criteria The criteria used by the test
     */
    void testResult( bool reachable, PathSearchCriteria* criteria );

protected slots:
    /**
     * @brief Slots interfacing this controller with its underlying path finder
     */
    void onResult( bool reachable, PathSearchCriteria criteria );
    void onPath( PathSearchCriteria criteria, PieceListManager* path );

private:
    /**
     * @brief test the next pending action if any
     */
    void testNextAction();

    PathFinder mPathFinder;
    PathSearchCriteria* mCurCriteria;
    PathSearchAction* mCurAction;
    std::list<PathSearchAction*> mTestActions;
};

#endif // PATHFINDERCONTROLLER_H
